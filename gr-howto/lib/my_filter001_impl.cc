/* -*- c++ -*- */
/*
 * Copyright 2020 gr-howto author.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "my_filter001_impl.h"

namespace gr {
  namespace howto {

    my_filter001::sptr
    my_filter001::make()
    {
      return gnuradio::get_initial_sptr
        (new my_filter001_impl());
    }


    /*
     * The private constructor
     */
    my_filter001_impl::my_filter001_impl()
      : gr::block("my_filter001",
              gr::io_signature::make(1, 1, sizeof(float)),
              gr::io_signature::make(1, 1, sizeof(float)))
    {}

    /*
     * Our virtual destructor.
     */
    my_filter001_impl::~my_filter001_impl()
    {
    }

    void
    my_filter001_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
    {
      /* <+forecast+> e.g. ninput_items_required[0] = noutput_items */
      ninput_items_required[0] = noutput_items ;
    }

    int
    my_filter001_impl::general_work (int noutput_items,
                       gr_vector_int &ninput_items,
                       gr_vector_const_void_star &input_items,
                       gr_vector_void_star &output_items)
    {
      const float *in = (const float *) input_items[0];
      float *out = (float *) output_items[0];

      int coef0_taps = 241;
      static float state[241] = {0};

      const float coef0[coef0_taps] =
	{
   0.000000000000000,
   0.000053142106639,
   0.000074231391223,
   0.000050453294817,
   0.000000000000000,
  -0.000042176434128,
  -0.000050904457853,
  -0.000028550123705,
   0.000000000000000,
   0.000010382088523,
  -0.000000000000000,
  -0.000010967453368,
   0.000000000000000,
   0.000033657929799,
   0.000063398736789,
   0.000055495308063,
   0.000000000000000,
  -0.000074107860689,
  -0.000115211892552,
  -0.000087159793229,
  -0.000000000000000,
   0.000092587047896,
   0.000130008225074,
   0.000088835822691,
  -0.000000000000000,
  -0.000075081887379,
  -0.000091132904788,
  -0.000051407976340,
   0.000000000000000,
   0.000018917627317,
  -0.000000000000000,
  -0.000020233087419,
   0.000000000000000,
   0.000062899480989,
   0.000119270328573,
   0.000105114642330,
   0.000000000000000,
  -0.000142357054062,
  -0.000222930328679,
  -0.000169909310014,
   0.000000000000000,
   0.000183288723875,
   0.000259428177636,
   0.000178722039873,
  -0.000000000000000,
  -0.000153629092636,
  -0.000188115556843,
  -0.000107074800036,
   0.000000000000000,
   0.000040145904565,
  -0.000000000000000,
  -0.000043791140567,
  -0.000000000000000,
   0.000138991547544,
   0.000266422032657,
   0.000237426779529,
  -0.000000000000000,
  -0.000329096765591,
  -0.000521645905568,
  -0.000402572010322,
   0.000000000000000,
   0.000445763755643,
   0.000639624644860,
   0.000446905168015,
  -0.000000000000000,
  -0.000395711299215,
  -0.000492140699214,
  -0.000284671440728,
  -0.000000000000000,
   0.000110415637090,
  -0.000000000000000,
  -0.000124911306766,
   0.000000000000000,
   0.000412338926842,
   0.000806988475731,
   0.000734892412828,
  -0.000000000000000,
  -0.001066607487634,
  -0.001732609614924,
  -0.001371785504880,
   0.000000000000000,
   0.001604513040868,
   0.002370939473054,
   0.001708439275924,
  -0.000000000000000,
  -0.001616763308222,
  -0.002084360608438,
  -0.001252329302489,
   0.000000000000000,
   0.000527654450058,
  -0.000000000000000,
  -0.000655387636768,
   0.000000000000000,
   0.002406657919410,
   0.004997120945870,
   0.004850289924665,
  -0.000000000000000,
  -0.008129760750225,
  -0.014333406814370,
  -0.012417331128593,
   0.000000000000000,
   0.017931136965488,
   0.030031899992014,
   0.024966184040606,
  -0.000000000000000,
  -0.033952029472655,
  -0.055682204825407,
  -0.045565520005945,
   0.000000000000000,
   0.060968073274927,
   0.099996980967897,
   0.082360379687182,
  -0.000000000000000,
  -0.114488155309056,
  -0.194887716888926,
  -0.169760147363275,
   0.000000000000000,
   0.293832781400983,
   0.630669899832298,
   0.898186951634905,
   0.999969809678973,
   0.898186951634905,
   0.630669899832298,
   0.293832781400983,
   0.000000000000000,
  -0.169760147363275,
  -0.194887716888926,
  -0.114488155309056,
  -0.000000000000000,
   0.082360379687182,
   0.099996980967897,
   0.060968073274927,
   0.000000000000000,
  -0.045565520005945,
  -0.055682204825407,
  -0.033952029472655,
  -0.000000000000000,
   0.024966184040606,
   0.030031899992014,
   0.017931136965488,
   0.000000000000000,
  -0.012417331128593,
  -0.014333406814370,
  -0.008129760750225,
  -0.000000000000000,
   0.004850289924665,
   0.004997120945870,
   0.002406657919410,
   0.000000000000000,
  -0.000655387636768,
  -0.000000000000000,
   0.000527654450058,
   0.000000000000000,
  -0.001252329302489,
  -0.002084360608438,
  -0.001616763308222,
  -0.000000000000000,
   0.001708439275924,
   0.002370939473054,
   0.001604513040868,
   0.000000000000000,
  -0.001371785504880,
  -0.001732609614924,
  -0.001066607487634,
  -0.000000000000000,
   0.000734892412828,
   0.000806988475731,
   0.000412338926842,
   0.000000000000000,
  -0.000124911306766,
  -0.000000000000000,
   0.000110415637090,
  -0.000000000000000,
  -0.000284671440728,
  -0.000492140699214,
  -0.000395711299215,
  -0.000000000000000,
   0.000446905168015,
   0.000639624644860,
   0.000445763755643,
   0.000000000000000,
  -0.000402572010322,
  -0.000521645905568,
  -0.000329096765591,
  -0.000000000000000,
   0.000237426779529,
   0.000266422032657,
   0.000138991547544,
  -0.000000000000000,
  -0.000043791140567,
  -0.000000000000000,
   0.000040145904565,
   0.000000000000000,
  -0.000107074800036,
  -0.000188115556843,
  -0.000153629092636,
  -0.000000000000000,
   0.000178722039873,
   0.000259428177636,
   0.000183288723875,
   0.000000000000000,
  -0.000169909310014,
  -0.000222930328679,
  -0.000142357054062,
   0.000000000000000,
   0.000105114642330,
   0.000119270328573,
   0.000062899480989,
   0.000000000000000,
  -0.000020233087419,
  -0.000000000000000,
   0.000018917627317,
   0.000000000000000,
  -0.000051407976340,
  -0.000091132904788,
  -0.000075081887379,
  -0.000000000000000,
   0.000088835822691,
   0.000130008225074,
   0.000092587047896,
  -0.000000000000000,
  -0.000087159793229,
  -0.000115211892552,
  -0.000074107860689,
   0.000000000000000,
   0.000055495308063,
   0.000063398736789,
   0.000033657929799,
   0.000000000000000,
  -0.000010967453368,
  -0.000000000000000,
   0.000010382088523,
   0.000000000000000,
  -0.000028550123705,
  -0.000050904457853,
  -0.000042176434128,
   0.000000000000000,
   0.000050453294817,
   0.000074231391223,
   0.000053142106639,
   0.000000000000000
	};



      // Do <+signal processing+>
      // Tell runtime system how many input items we consumed on
      // each input stream.
      //add
      for(int i = 0; i<noutput_items; ++i) {
	for (int j = 0; j < coef0_taps - 1; j++)
	{
		state[j] = state[j + 1] ;
	}
	state[coef0_taps - 1] = in[i];
	out[i] = 0;
	for (int k = 0; k < coef0_taps; k++)
	{
		out[i] = out[i] + coef0[k] * state[k];
	}
      }

      consume_each (noutput_items);

      // Tell runtime system how many output items we produced.
      return noutput_items;
    }

  } /* namespace howto */
} /* namespace gr */

